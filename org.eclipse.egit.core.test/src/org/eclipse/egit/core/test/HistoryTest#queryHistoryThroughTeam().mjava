	@Test
	public void queryHistoryThroughTeam() throws IOException, CoreException {
		GitSynchronizeData gsd = new GitSynchronizeData(
				testRepository.getRepository(), MASTER, BRANCH, false);
		GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd);
		GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(
				gsds);
		subscriber.init(new NullProgressMonitor());

		IDiff diff = subscriber.getDiff(iFile2);
		assertTrue(diff instanceof IThreeWayDiff);

		IFileRevision sourceRevision = getSource(diff);
		IFileRevision destinationRevision = getDestination(diff);
		IFileRevision baseRevision = getBase(diff);

		assertRevisionMatchCommit(baseRevision, masterCommit2);
		assertRevisionMatchCommit(destinationRevision, branchCommit2);
		assertRevisionMatchCommit(sourceRevision, masterCommit3);

		final IFileHistory history = historyProvider.getFileHistoryFor(iFile2,
				IFileHistoryProvider.NONE,
				new NullProgressMonitor());
		assertNotNull(history);

		IFileRevision[] parents = history.getContributors(baseRevision);
		assertEquals(0, parents.length);

		IFileRevision[] children = history.getTargets(baseRevision);
		List<RevCommit> expectedChildren = new ArrayList<>(
				Arrays.asList(masterCommit3, branchCommit2));
		assertEquals(expectedChildren.size(), children.length);
		assertMatchingRevisions(Arrays.asList(children), expectedChildren);
	}

