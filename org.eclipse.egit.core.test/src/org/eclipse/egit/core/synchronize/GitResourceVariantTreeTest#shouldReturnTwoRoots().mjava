	@Test
	public void shouldReturnTwoRoots() throws Exception {
		TestProject secondProject = new TestProject(true, "Project-2");
		try {
			IProject secondIProject = secondProject.project;
			new ConnectProviderOperation(secondIProject, gitDir).execute(null);
			try (Git git = new Git(repo)) {
				git.commit().setAuthor("JUnit", "junit@egit.org")
						.setMessage("Initial commit").call();
			}
			GitSynchronizeData data = new GitSynchronizeData(repo, HEAD, HEAD,
					false);
			GitSynchronizeDataSet dataSet = new GitSynchronizeDataSet(data);

			GitResourceVariantTree grvt = new GitTestResourceVariantTree(dataSet,
					null, null);

			IResource[] roots = grvt.roots();
			Arrays.sort(roots, new Comparator<IResource>() {
				@Override
				public int compare(IResource r1, IResource r2) {
					String path1 = r1.getFullPath().toString();
					String path2 = r2.getFullPath().toString();
					return path1.compareTo(path2);
				}
			});
			assertEquals(2, roots.length);
			IResource actualProject = roots[0];
			assertEquals(this.project.project, actualProject);
			IResource actualProject1 = roots[1];
			assertEquals(secondIProject, actualProject1);
		} finally {
			secondProject.dispose();
		}
	}

