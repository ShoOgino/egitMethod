	public static final <T> void addContentProposalToText(Text textField,
			IContentProposalCandidateProvider<T> candidateProvider,
			IContentProposalFactory<T> factory, String startTypingMessage,
			String shortcutMessage) {
		KeyStroke stroke = UIUtils
				.getKeystrokeOfBestActiveBindingFor(IWorkbenchCommandConstants.EDIT_CONTENT_ASSIST);
		if (stroke == null) {
			addBulbDecorator(textField, startTypingMessage);
		} else {
			addBulbDecorator(textField,
					NLS.bind(shortcutMessage, stroke.format()));
		}
		IContentProposalProvider cp = new IContentProposalProvider() {
			@Override
			public IContentProposal[] getProposals(String contents, int position) {
				List<IContentProposal> resultList = new ArrayList<>();

				String patternString = contents;
				while (patternString.length() > 0
						&& patternString.charAt(0) == ' ') {
					patternString = patternString.substring(1);
				}

				patternString = Pattern.quote(patternString);

				patternString = patternString.replaceAll("\\x2A", ".*"); 
				if (!patternString.endsWith(".*")) { 					patternString = patternString + ".*"; 				}

				Pattern pattern;
				try {
					pattern = Pattern.compile(patternString,
							Pattern.CASE_INSENSITIVE);
				} catch (PatternSyntaxException e) {
					pattern = null;
				}

				Collection<? extends T> candidates = candidateProvider
						.getCandidates();

				if (candidates != null)
					for (final T ref : candidates) {
						IContentProposal proposal = factory.getProposal(pattern,
								ref);
						if (proposal != null) {
							resultList.add(proposal);
						}
					}

				return resultList.toArray(new IContentProposal[resultList
						.size()]);
			}
		};

		ContentProposalAdapter adapter = new ContentProposalAdapter(textField,
				new TextContentAdapter(), cp, stroke,
				UIUtils.VALUE_HELP_ACTIVATIONCHARS);
		adapter.setProposalAcceptanceStyle(
				ContentProposalAdapter.PROPOSAL_REPLACE);
	}

