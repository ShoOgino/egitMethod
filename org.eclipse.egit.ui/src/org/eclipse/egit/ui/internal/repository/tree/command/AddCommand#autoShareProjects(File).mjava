	private void autoShareProjects(File repositoryDir) {
		IPath workingDirPath;
		try {
			Repository repo = Activator.getDefault().getRepositoryCache()
					.lookupRepository(repositoryDir);
			if (repo.isBare()) {
				return;
			}
			workingDirPath = new Path(repo.getWorkTree().getAbsolutePath());
		} catch (IOException e) {
			org.eclipse.egit.ui.Activator.logError(e.getLocalizedMessage(), e);
			return;
		}
		Map<IProject, File> connections = new HashMap<>();
		IProject[] projects = ResourcesPlugin.getWorkspace().getRoot()
				.getProjects();
		for (IProject project : projects) {
			if (!project.isAccessible()) {
				continue;
			}
			RepositoryProvider provider = RepositoryProvider
					.getProvider(project);
			if (provider != null) {
				continue;
			}
			IPath location = project.getLocation();
			if (location == null) {
				continue;
			}
			if (!workingDirPath.isPrefixOf(location)) {
				continue;
			}
			RepositoryFinder f = new RepositoryFinder(project);
			f.setFindInChildren(false);
			try {
				List<RepositoryMapping> mappings = f
						.find(new NullProgressMonitor());
				if (!mappings.isEmpty()) {
					IPath gitDir = mappings.get(0).getGitDirAbsolutePath();
					if (gitDir != null) {
						connections.put(project, gitDir.toFile());
					}
				}
			} catch (CoreException e) {
				continue;
			}
		}
		if (!connections.isEmpty()) {
			ConnectProviderOperation operation = new ConnectProviderOperation(
					connections);
			operation.setRefreshResources(false);
			JobUtil.scheduleUserJob(operation,
					CoreText.Activator_AutoShareJobName, JobFamilies.AUTO_SHARE);
		}
	}

