	private void doSearch() {
		setMessage(UIText.RepositorySearchDialog_searchRepositoriesMessage);
		setErrorMessage(null);
		final Set<Path> directories = new TreeSet<>(
				CommonUtils.PATH_STRING_COMPARATOR);
		final Path file = Paths.get(dir.getText());
		final boolean lookForNested = lookForNestedButton.getSelection();
		final boolean skipHidden = skipHiddenButton.getSelection();
		if (!Files.isDirectory(file)) {
			return;
		}

		prefs.put(PREF_PATH, file.toAbsolutePath().toString());
		try {
			prefs.flush();
		} catch (BackingStoreException e1) {
		}

		final TreeSet<String> validDirs = new TreeSet<>(getCheckedItems());
		final String[] summary = new String[1];
		IRunnableWithProgress action = new IRunnableWithProgress() {

			@Override
			public void run(IProgressMonitor monitor)
					throws InvocationTargetException, InterruptedException {
				monitor.beginTask(
						UIText.RepositorySearchDialog_ScanningForRepositories_message,
						IProgressMonitor.UNKNOWN);
				try {
					summary[0] = findGitDirsRecursive(file, directories, monitor,
							lookForNested, skipHidden);
				} catch (Exception ex) {
					throw new InvocationTargetException(ex);
				}
				if (monitor.isCanceled()) {
					throw new InterruptedException();
				}
			}
		};
		try {
			getContainer().run(true, true, action);
		} catch (InvocationTargetException e1) {
			org.eclipse.egit.ui.Activator.handleError(
					UIText.RepositorySearchDialog_errorOccurred, e1.getCause(),
					true);
		} catch (InterruptedException e1) {
		}

		int foundOld = 0;

		for (Path foundDir : directories) {
			String absolutePath = foundDir.toAbsolutePath().toString();
			if (!fExistingDirectories.contains(absolutePath)
					&& !fExistingDirectories.contains(FileUtils
							.canonicalize(foundDir.toFile())
							.getAbsolutePath())) {
				validDirs.add(absolutePath);
			} else {
				foundOld++;
			}
		}

		if (foundOld > 0) {
			String message = summary[0] + '\n'
					+ MessageFormat.format(
					UIText.RepositorySearchDialog_SomeDirectoriesHiddenMessage,
					Integer.valueOf(foundOld));
			setMessage(message, IMessageProvider.INFORMATION);
		} else if (directories.isEmpty()) {
			setMessage(summary[0], IMessageProvider.INFORMATION);
		} else {
			setMessage(summary[0]);
		}

		checkAllItem.setEnabled(!validDirs.isEmpty());
		uncheckAllItem.setEnabled(!validDirs.isEmpty());
		fTree.clearFilter();
		GridDataFactory.fillDefaults().grab(true, true).applyTo(fTree);
		fTreeViewer.setInput(validDirs);

		if (!validDirs.isEmpty()) {
			fTree.getFilterControl().setFocus();
		}

		enableOk();
	}

