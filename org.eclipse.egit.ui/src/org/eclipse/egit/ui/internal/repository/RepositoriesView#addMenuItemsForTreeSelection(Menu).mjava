	@SuppressWarnings("unchecked")
	private void addMenuItemsForTreeSelection(Menu men) {
		final List<RepositoryTreeNode<Ref>> refs = new ArrayList<RepositoryTreeNode<Ref>>();
		final List<RepositoryTreeNode<File>> projects = new ArrayList<RepositoryTreeNode<File>>();
		final List<RepositoryTreeNode<Repository>> repos = new ArrayList<RepositoryTreeNode<Repository>>();

		TreeItem[] selectedItems = tv.getTree().getSelection();
		for (TreeItem item : selectedItems) {
			RepositoryTreeNode node = (RepositoryTreeNode) item.getData();
			switch (node.getType()) {
			case PROJ:
				projects.add(node);
				break;
			case REF:
				refs.add(node);
				break;
			case REPO:
				repos.add(node);
				break;
			default:
				break;
			}
		}

		boolean importableProjectsOnly = !projects.isEmpty() && repos.isEmpty()
				&& refs.isEmpty();

		for (RepositoryTreeNode<File> prj : projects) {
			if (!importableProjectsOnly)
				break;

			for (IProject proj : ResourcesPlugin.getWorkspace().getRoot()
					.getProjects()) {
				if (proj.getLocation().equals(
						new Path(prj.getObject().getAbsolutePath())))
					importableProjectsOnly = false;

			}

		}

		boolean singleRef = refs.size() == 1 && projects.isEmpty()
				&& repos.isEmpty();
		boolean singleRepo = repos.size() == 1 && projects.isEmpty()
				&& refs.isEmpty();

		try {
			singleRef = singleRef
					&& !refs.get(0).getObject().getName()
							.equals(Constants.HEAD)
					&& (refs.get(0).getRepository().mapCommit(
							refs.get(0).getObject().getLeaf().getObjectId()) != null);
		} catch (IOException e2) {
			singleRef = false;
		}

		if (importableProjectsOnly) {
			MenuItem sync = new MenuItem(men, SWT.PUSH);
			sync
					.setText(RepositoryViewUITexts.RepositoriesView_ImportProject_MenuItem);

			sync.addSelectionListener(new SelectionAdapter() {

				@Override
				public void widgetSelected(SelectionEvent e) {

					IWorkspaceRunnable wsr = new IWorkspaceRunnable() {

						public void run(IProgressMonitor monitor)
								throws CoreException {

							for (RepositoryTreeNode<File> projectNode : projects) {
								File file = projectNode.getObject();

								IProjectDescription pd = ResourcesPlugin
										.getWorkspace().newProjectDescription(
												file.getName());
								IPath locationPath = new Path(file
										.getAbsolutePath());

								pd.setLocation(locationPath);

								ResourcesPlugin.getWorkspace().getRoot()
										.getProject(pd.getName()).create(pd,
												monitor);
								IProject project = ResourcesPlugin
										.getWorkspace().getRoot().getProject(
												pd.getName());
								project.open(monitor);

								File gitDir = projectNode.getRepository()
										.getDirectory();

								ConnectProviderOperation connectProviderOperation = new ConnectProviderOperation(
										project, gitDir);
								connectProviderOperation
										.run(new SubProgressMonitor(monitor, 20));

							}

						}
					};

					try {

						ResourcesPlugin.getWorkspace().run(wsr,
								ResourcesPlugin.getWorkspace().getRoot(),
								IWorkspace.AVOID_UPDATE,
								new NullProgressMonitor());

						scheduleRefresh();
					} catch (CoreException e1) {
						Activator.getDefault().getLog().log(e1.getStatus());
					}

				}

			});
		}

		if (singleRef) {

			MenuItem checkout = new MenuItem(men, SWT.PUSH);
			checkout
					.setText(RepositoryViewUITexts.RepositoriesView_CheckOut_MenuItem);
			checkout.addSelectionListener(new SelectionAdapter() {

				@Override
				public void widgetSelected(SelectionEvent e) {
					Repository repo = refs.get(0).getRepository();
					String refName = refs.get(0).myObject.getLeaf().getName();
					final BranchOperation op = new BranchOperation(repo,
							refName);
					IWorkspaceRunnable wsr = new IWorkspaceRunnable() {

						public void run(IProgressMonitor monitor)
								throws CoreException {
							op.run(monitor);
						}
					};
					try {
						ResourcesPlugin.getWorkspace().run(wsr,
								ResourcesPlugin.getWorkspace().getRoot(),
								IWorkspace.AVOID_UPDATE,
								new NullProgressMonitor());
						scheduleRefresh();
					} catch (CoreException e1) {
						MessageDialog
								.openError(
										getSite().getShell(),
										RepositoryViewUITexts.RepositoriesView_Error_WindowTitle,
										e1.getMessage());
					}

				}

			});
		}

		if (singleRepo) {

			MenuItem importProjects = new MenuItem(men, SWT.PUSH);
			importProjects
					.setText(RepositoryViewUITexts.RepositoriesView_ImportExistingProjects_MenuItem);
			importProjects.addSelectionListener(new SelectionAdapter() {

				@Override
				public void widgetSelected(SelectionEvent e) {
					Wizard wiz = new ExternalProjectImportWizard(repos.get(0)
							.getRepository().getWorkDir().getAbsolutePath()) {

						@Override
						public void addPages() {
							super.addPages();
						}

						@Override
						public boolean performFinish() {

							final Set<IPath> previousLocations = new HashSet<IPath>();
							for (IProject project : ResourcesPlugin
									.getWorkspace().getRoot().getProjects()) {
								previousLocations.add(project.getLocation());
							}

							boolean success = super.performFinish();
							if (success) {

								IWorkspaceRunnable wsr = new IWorkspaceRunnable() {

									public void run(IProgressMonitor monitor)
											throws CoreException {
										File gitDir = repos.get(0)
												.getRepository().getDirectory();
										File gitWorkDir = repos.get(0)
												.getRepository().getWorkDir();
										Path workPath = new Path(gitWorkDir
												.getAbsolutePath());

										for (IProject prj : ResourcesPlugin
												.getWorkspace().getRoot()
												.getProjects()) {

											if (workPath.isPrefixOf(prj
													.getLocation())) {
												if (previousLocations
														.contains(prj
																.getLocation())) {
													continue;
												}
												ConnectProviderOperation connectProviderOperation = new ConnectProviderOperation(
														prj, gitDir);
												connectProviderOperation
														.run(new SubProgressMonitor(
																monitor, 20));

											}
										}

									}
								};

								try {
									ResourcesPlugin.getWorkspace().run(
											wsr,
											ResourcesPlugin.getWorkspace()
													.getRoot(),
											IWorkspace.AVOID_UPDATE,
											new NullProgressMonitor());
									scheduleRefresh();
								} catch (CoreException ce) {
									MessageDialog
											.openError(
													getShell(),
													RepositoryViewUITexts.RepositoriesView_Error_WindowTitle,
													ce.getMessage());
								}

							}
							return success;
						}

					};

					WizardDialog dlg = new WizardDialog(getSite().getShell(),
							wiz);
					dlg.open();
				}

			});


			MenuItem remove = new MenuItem(men, SWT.PUSH);
			remove
					.setText(RepositoryViewUITexts.RepositoriesView_Remove_MenuItem);
			remove.addSelectionListener(new SelectionAdapter() {

				@Override
				public void widgetSelected(SelectionEvent e) {

					List<IProject> projectsToDelete = new ArrayList<IProject>();
					File workDir = repos.get(0).getRepository().getWorkDir();
					final IPath wdPath = new Path(workDir.getAbsolutePath());
					for (IProject prj : ResourcesPlugin.getWorkspace()
							.getRoot().getProjects()) {
						if (wdPath.isPrefixOf(prj.getLocation())) {
							projectsToDelete.add(prj);
						}
					}

					if (!projectsToDelete.isEmpty()) {
						boolean confirmed;
						confirmed = confirmProjectDeletion(projectsToDelete);
						if (!confirmed) {
							return;
						}
					}

					IWorkspaceRunnable wsr = new IWorkspaceRunnable() {

						public void run(IProgressMonitor monitor)
								throws CoreException {

							for (IProject prj : ResourcesPlugin.getWorkspace()
									.getRoot().getProjects()) {
								if (wdPath.isPrefixOf(prj.getLocation())) {
									prj.delete(false, false, monitor);
								}
							}

							Repository repo = repos.get(0).getRepository();
							removeDir(repo.getDirectory().getAbsolutePath());
							scheduleRefresh();
						}
					};

					try {
						ResourcesPlugin.getWorkspace().run(wsr,
								ResourcesPlugin.getWorkspace().getRoot(),
								IWorkspace.AVOID_UPDATE,
								new NullProgressMonitor());
					} catch (CoreException e1) {
						Activator.getDefault().getLog().log(e1.getStatus());
					}

				}

			});


		}
	}

