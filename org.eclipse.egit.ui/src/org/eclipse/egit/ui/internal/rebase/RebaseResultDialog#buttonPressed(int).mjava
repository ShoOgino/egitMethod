	@Override
	protected void buttonPressed(int buttonId) {
		if (toggleButton != null)
			Activator.getDefault().getPreferenceStore().setValue(
					UIPreferences.SHOW_REBASE_CONFIRM,
					!toggleButton.getSelection());
		if (buttonId == IDialogConstants.OK_ID) {
			if (result.getStatus() != Status.STOPPED) {
				super.buttonPressed(buttonId);
				return;
			}
			if (startMergeButton.getSelection()) {
				super.buttonPressed(buttonId);
				IProject[] projects = ProjectUtil.getProjects(repo);
				try {
					ResourcesPlugin.getWorkspace().run(
							pm -> ProjectUtil.refreshResources(projects, pm),
							null, IWorkspace.AVOID_UPDATE, null);
				} catch (CoreException e) {
					Activator.logError(e.getMessage(), e);
				}
				List<IPath> locationList = new ArrayList<>();
				IPath repoWorkdirPath = new Path(repo.getWorkTree().getPath());
				for (String repoPath : conflictPaths) {
					IPath location = repoWorkdirPath.append(repoPath);
					locationList.add(location);
				}
				IPath[] locations = locationList.toArray(new IPath[0]);
				int mergeMode = Activator.getDefault().getPreferenceStore()
						.getInt(UIPreferences.MERGE_MODE);
				CompareEditorInput input;
				if (mergeMode == 0) {
					MergeModeDialog dlg = new MergeModeDialog(getParentShell());
					if (dlg.open() != Window.OK)
						return;
					input = new GitMergeEditorInput(dlg.useWorkspace(),
							locations);
				} else {
					boolean useWorkspace = mergeMode == 1;
					input = new GitMergeEditorInput(useWorkspace,
							locations);
				}
				CompareUI.openCompareEditor(input);
				return;
			} else if (skipCommitButton.getSelection()) {
				SkipRebaseCommand skipCommand = new SkipRebaseCommand();
				execute(skipCommand);
			} else if (abortRebaseButton.getSelection()) {
				AbortRebaseCommand abortCommand = new AbortRebaseCommand();
				execute(abortCommand);
			} else if (doNothingButton.getSelection()) {
			}
		}
		super.buttonPressed(buttonId);
	}

