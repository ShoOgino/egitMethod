	private void createColumns() {
		String[] headings = { UIText.RebaseInteractiveView_HeadingStatus,
				UIText.RebaseInteractiveView_HeadingAction,
				UIText.RebaseInteractiveView_HeadingCommitId,
				UIText.RebaseInteractiveView_HeadingMessage };

		ColumnViewerToolTipSupport.enableFor(planTreeViewer,
				ToolTip.NO_RECREATE);

		TreeViewerColumn infoColumn = new TreeViewerColumn(planTreeViewer,
				SWT.NONE);
		infoColumn.getColumn().setText(headings[0]);
		infoColumn.getColumn().setMoveable(false);
		infoColumn.getColumn().setResizable(true);
		infoColumn.getColumn().setWidth(70);

		infoColumn.setLabelProvider(new HighlightingColumnLabelProvider() {

			@Override
			public Image getImage(Object element) {
				ElementType t = getType(element);
				if (t != null) {
					switch (t) {
					case TODO:
						return UIIcons.getImage(resources, UIIcons.TODO_STEP);
					case DONE_CURRENT:
						return UIIcons
								.getImage(resources, UIIcons.CURRENT_STEP);
					case DONE:
						return UIIcons.getImage(resources, UIIcons.DONE_STEP);
					default:
					}
				}
				return null;
			}

			@Override
			public String getToolTipText(Object element) {
				ElementType t = getType(element);
				if (t != null) {
					switch (t) {
					case DONE:
						return UIText.RebaseInteractiveView_StatusDone;
					case DONE_CURRENT:
						return UIText.RebaseInteractiveView_StatusCurrent;
					case TODO:
						return UIText.RebaseInteractiveView_StatusTodo;
					default:
					}
				}
				return ""; 			}

			@Override
			public String getText(Object element) {
				return ""; 			}
		});

		TreeViewerColumn actionColumn = new TreeViewerColumn(planTreeViewer,
				SWT.NONE);
		actionColumn.getColumn().setText(headings[1]);
		actionColumn.getColumn().setMoveable(false);
		actionColumn.getColumn().setResizable(true);
		actionColumn.getColumn().setWidth(90);

		actionColumn.setLabelProvider(new HighlightingColumnLabelProvider() {

			@Override
			public Image getImage(Object element) {
				ElementAction a = getAction(element);
				if (a != null) {
					switch (a) {
					case EDIT:
						return UIIcons.getImage(resources, UIIcons.EDITCONFIG);
					case FIXUP:
						return UIIcons.getImage(resources, UIIcons.FIXUP);
					case PICK:
						return UIIcons.getImage(resources, UIIcons.CHERRY_PICK);
					case REWORD:
						return UIIcons.getImage(resources, UIIcons.REWORD);
					case SKIP:
						return UIIcons.getImage(resources, UIIcons.REBASE_SKIP);
					case SQUASH:
						return UIIcons.getImage(resources, UIIcons.SQUASH);
					default:
					}
				}
				return super.getImage(element);
			}

			@Override
			public String getText(Object element) {
				ElementAction a = getAction(element);
				return (a != null) ? a.name() : super.getText(element);
			}

			private ElementAction getAction(Object element) {
				if (element instanceof PlanElement) {
					PlanElement planLine = (PlanElement) element;
					return planLine.getPlanElementAction();
				} else
					return null;
			}
		});

		TreeViewerColumn commitIDColumn = new TreeViewerColumn(planTreeViewer,
				SWT.NONE);
		commitIDColumn.getColumn().setText(headings[2]);
		commitIDColumn.getColumn().setMoveable(false);
		commitIDColumn.getColumn().setResizable(true);
		commitIDColumn.getColumn().setWidth(70);

		commitIDColumn.setLabelProvider(new HighlightingColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				if (element instanceof PlanElement) {
					PlanElement planLine = (PlanElement) element;
					return planLine.getCommit().name();
				}
				return super.getText(element);
			}
		});

		TreeViewerColumn commitMessageColumn = new TreeViewerColumn(
				planTreeViewer, SWT.NONE);
		commitMessageColumn.getColumn().setText(headings[3]);
		commitMessageColumn.getColumn().setMoveable(false);
		commitMessageColumn.getColumn().setResizable(true);
		commitMessageColumn.getColumn().setWidth(200);

		commitMessageColumn
				.setLabelProvider(new HighlightingColumnLabelProvider() {
					@Override
					public String getText(Object element) {
						if (element instanceof PlanElement) {
							PlanElement planLine = (PlanElement) element;
							return planLine.getShortMessage();
						}
						return super.getText(element);
					}
				});
	}

