	void setProjectsList(final String path) {
		if (path == null || path.length() == 0) {
			selectedProjects = new ProjectRecord[0];
			projectsList.refresh(true);
			checkPageComplete();
			lastPath = path;
			setErrorMessage(UIText.GitProjectsImportPage_NoProjectsMessage);
			return;
		}

		final File directory = new File(path);
		long modified = directory.lastModified();
		if (path.equals(lastPath) && lastModified == modified
				&& lastNestedProjects == nestedProjects) {
			return;
		}

		setErrorMessage(null);

		lastPath = path;
		lastModified = modified;
		lastNestedProjects = nestedProjects;

		try {
			getContainer().run(true, true, new IRunnableWithProgress() {

				@Override
				public void run(IProgressMonitor monitor) {
					selectedProjects = new ProjectRecord[0];
					Collection<File> files = new ArrayList<>();
					if (directory.isDirectory()) {
						SubMonitor progress = SubMonitor.convert(monitor, 2);
						progress.setTaskName(
								UIText.WizardProjectsImportPage_SearchingMessage);
						boolean searchNested = nestedProjects;

						boolean found = ProjectUtil.findProjectFiles(files,
								directory, searchNested, progress.newChild(1));

						if (!found) {
							return;
						}
						ArrayList<ProjectRecord> result = new ArrayList<>();
						progress.setWorkRemaining(files.size());
						progress.subTask(
								UIText.WizardProjectsImportPage_ProcessingMessage);
						for (File file : files) {
							if (isSelected(file)) {
								ProjectRecord record = new ProjectRecord(file);
								if (record.getProjectDescription() == null) {
									continue;
								}
								result.add(record);
							}
							progress.worked(1);
						}
						selectedProjects = result
								.toArray(new ProjectRecord[0]);

						if (selectedProjects.length == 0) {
							Display.getDefault().syncExec(() -> setErrorMessage(
									UIText.GitProjectsImportPage_NoProjectsMessage));
						}
					}
				}

				private boolean isSelected(File pFile) {
					IWizard wiz = getWizard();
					if (!(wiz instanceof GitCreateProjectViaWizardWizard)) {
						return true;
					}
					GitCreateProjectViaWizardWizard wizard = (GitCreateProjectViaWizardWizard) wiz;
					return wizard.getFilter().isEmpty() || wizard.getFilter().contains(pFile.getParent());
				}

			});
		} catch (InvocationTargetException e) {
			Activator.logError(e.getMessage(), e);
		} catch (InterruptedException e) {
		}

		projectsList.refresh(true);
		if (getValidProjects().length < selectedProjects.length) {
			setMessage(UIText.WizardProjectsImportPage_projectsInWorkspace,
					WARNING);
		} else {
			setMessage(UIText.WizardProjectsImportPage_ImportProjectsDescription);
		}
		selectAllNewProjects();
		enableSelectAllButtons();
		checkPageComplete();
	}

