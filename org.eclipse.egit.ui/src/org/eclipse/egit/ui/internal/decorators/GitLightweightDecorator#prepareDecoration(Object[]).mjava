	private void prepareDecoration(final Object[] elements) {
		if (elements == null)
			return;

		final IResource[] resources = new IResource[elements.length];
		for (int i = 0; i < elements.length; i++) {
			if (elements[i] != null)
				resources[i] = getResource(elements[i]);
		}

		try {
			IDecoratableResource[] decoratableResources = DecoratableResourceHelper
					.createDecoratableResources(resources);

			for (int i = 0; i < decoratableResources.length; i++) {
				try {
					if (decoratableResources[i] != null) {
						resources[i].setSessionProperty(
								DECORATABLE_RESOURCE_KEY,
								decoratableResources[i]);
						resources[i].setSessionProperty(REFRESHED_KEY,
								Long.valueOf(System.currentTimeMillis()));
					} else {
						if (resources[i] != null)
							handleException(
									resources[i],
									new CoreException(
											Activator
													.createErrorStatus(UIText.GitLightweightDecorator_ResourceError)));
					}
				} catch (CoreException e) {
					handleException(resources[i], e);
				}
			}
		} catch (IOException e) {
			exceptions
					.handleException(new CoreException(
							Activator
									.createErrorStatus(
											UIText.GitLightweightDecorator_AsynchronousDecorationError,
											e)));
			return;
		}

		fireLabelEvent(new LabelProviderChangedEvent(this));
	}

