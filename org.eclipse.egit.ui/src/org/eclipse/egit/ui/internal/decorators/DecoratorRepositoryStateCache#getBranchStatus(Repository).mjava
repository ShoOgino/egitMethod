	public String getBranchStatus(Repository repository) {
		File gitDir = repository.getDirectory();
		if (branchStatesToClear.remove(gitDir)) {
			branchStateLabels.remove(gitDir);
		}
		String label = branchStateLabels
				.computeIfAbsent(gitDir, dir -> {
					return UnitOfWork.get(repository, () -> {
						String branchName = getFullBranchName(repository);
						if (branchName == null) {
							return ""; 						}
						BranchTrackingStatus status = null;
						try {
							status = BranchTrackingStatus.of(repository,
									branchName);
						} catch (IOException e) {
						}
						if (status == null) {
							return ""; 						}
						if (status.getAheadCount() == 0
								&& status.getBehindCount() == 0) {
							return ""; 						}
						return GitLabels.formatBranchTrackingStatus(status);

					});
				});
		return StringUtils.isEmptyOrNull(label) ? null : label;
	}

