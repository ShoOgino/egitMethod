	void populate() throws IOException {
		if (GitTraceLocation.UI.isActive())
			GitTraceLocation.getTrace().trace(
					GitTraceLocation.UI.getLocation(),"(GitDocument) populate: " + resource); 		RepositoryMapping mapping = RepositoryMapping.getMapping(resource);
		if (mapping == null) {
			setResolved(null, null, null, ""); 			return;
		}
		final String gitPath = mapping.getRepoRelativePath(resource);
		final Repository repository = mapping.getRepository();
		String baseline = GitQuickDiffProvider.baseline.get(repository);
		if (baseline == null)
			baseline = Constants.HEAD;
		ObjectId commitId = repository.resolve(baseline);
		if (commitId != null) {
			if (commitId.equals(lastCommit)) {
				if (GitTraceLocation.UI.isActive())
					GitTraceLocation.getTrace().trace(
							GitTraceLocation.UI.getLocation(),
							"(GitDocument) already resolved"); 				return;
			}
		} else {
			String msg = NLS.bind(UIText.GitDocument_errorResolveQuickdiff,
					new Object[] { baseline, resource, repository });
			Activator.logError(msg, new Throwable());
			setResolved(null, null, null, ""); 			return;
		}
		Commit baselineCommit = repository.mapCommit(commitId);
		if (baselineCommit == null) {
			String msg = NLS.bind(UIText.GitDocument_errorLoadCommit,
					new Object[] { commitId, baseline, resource, repository });
			Activator.logError(msg, new Throwable());
			setResolved(null, null, null, ""); 			return;
		}
		ObjectId treeId = baselineCommit.getTreeId();
		if (treeId.equals(lastTree)) {
			if (GitTraceLocation.UI.isActive())
				GitTraceLocation.getTrace().trace(
						GitTraceLocation.UI.getLocation(),
						"(GitDocument) already resolved"); 			return;
		}
		Tree baselineTree = baselineCommit.getTree();
		if (baselineTree == null) {
			String msg = NLS.bind(UIText.GitDocument_errorLoadTree,
					new Object[] { treeId, baseline, resource, repository });
			Activator.logError(msg, new Throwable());
			setResolved(null, null, null, ""); 			return;
		}
		TreeEntry blobEntry = baselineTree.findBlobMember(gitPath);
		if (blobEntry != null && !blobEntry.getId().equals(lastBlob)) {
			if (GitTraceLocation.UI.isActive())
				GitTraceLocation.getTrace().trace(
						GitTraceLocation.UI.getLocation(),
						"(GitDocument) compareTo: " + baseline); 			ObjectLoader loader = repository.openBlob(blobEntry.getId());
			byte[] bytes = loader.getBytes();
			String charset;
			IEncodedStorage encodedStorage = ((IEncodedStorage)resource);
			try {
				charset = encodedStorage.getCharset();
				if (charset != null)
					charset = resource.getParent().getDefaultCharset();
			} catch (CoreException e) {
				charset = Constants.CHARACTER_ENCODING;
			}
			String s = new String(bytes, charset);
			setResolved(commitId, baselineTree.getId(), blobEntry.getId(), s);
			if (GitTraceLocation.UI.isActive())
				GitTraceLocation
						.getTrace()
						.trace(
								GitTraceLocation.UI.getLocation(),
								"(GitDocument) has reference doc, size=" + s.length() + " bytes"); 		} else {
			if (blobEntry == null)
				setResolved(null, null, null, ""); 			else
			if (GitTraceLocation.UI.isActive())
				GitTraceLocation.getTrace().trace(
						GitTraceLocation.UI.getLocation(),
						"(GitDocument) already resolved"); 		}
	}

