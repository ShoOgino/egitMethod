	public DecoratableResourceAdapter(@NonNull IndexDiffData indexDiffData,
			@NonNull IResource resourceToWrap) {
		super(resourceToWrap);
		boolean trace = GitTraceLocation.DECORATION.isActive();
		long start = 0;
		if (trace) {
			GitTraceLocation.getTrace().trace(
					GitTraceLocation.DECORATION.getLocation(),
					"Decorate " + resourceToWrap.getFullPath()); 			start = System.nanoTime();
		}
		try {
			RepositoryMapping mapping = RepositoryMapping
					.getMapping(resourceToWrap);
			if (mapping == null) {
				return;
			}
			Repository repository = mapping.getRepository();
			if (repository == null) {
				return;
			}
			setIsRepositoryContainer(resourceToWrap.equals(mapping.getContainer()));
			IResourceState baseState = ResourceStateFactory.getInstance()
					.get(indexDiffData, resourceToWrap);
			setTracked(baseState.isTracked());
			setIgnored(baseState.isIgnored());
			setDirty(baseState.isDirty());
			setConflicts(baseState.hasConflicts());
			setAssumeUnchanged(baseState.isAssumeUnchanged());
			setStagingState(baseState.getStagingState());
			if (isRepositoryContainer() && !isIgnored()) {
				repositoryName = DecoratorRepositoryStateCache.INSTANCE
						.getRepositoryNameAndState(repository);
				branch = DecoratorRepositoryStateCache.INSTANCE
						.getCurrentBranchLabel(repository);
				branchStatus = DecoratorRepositoryStateCache.INSTANCE
						.getBranchStatus(repository);
				RevCommit headCommit = DecoratorRepositoryStateCache.INSTANCE
						.getHeadCommit(repository);
				if (headCommit != null) {
					commitMessage = headCommit.getShortMessage();
				}
			}
		} finally {
			if (trace)
				GitTraceLocation
						.getTrace()
						.trace(GitTraceLocation.DECORATION.getLocation(),
								"Decoration took " + (System.nanoTime() - start) 										+ " ns"); 		}
	}

