	public void decorate(Object element, IDecoration decoration) {

		final IResource resource = getResource(element);
		if (resource == null)
			return;

		if (!PlatformUI.isWorkbenchRunning())
			return;

		final Activator activator = Activator.getDefault();
		if (activator == null)
			return;

		if (resource.getType() == IResource.ROOT)
			return;

		if (!resource.exists() && !resource.isPhantom())
			return;

		try {
			final Boolean notDecoratable = (Boolean) resource
					.getSessionProperty(NOT_DECORATABLE_KEY);
			if (notDecoratable != null && notDecoratable.equals(Boolean.TRUE)) {
				return;
			} else {
				final Long refreshed = (Long) resource
						.getSessionProperty(REFRESHED_KEY);
				if (refreshed != null) {
					final Long refresh = (Long) resource.getWorkspace()
							.getRoot().getSessionProperty(REFRESH_KEY);
					if (refresh == null
							|| refresh.longValue() <= refreshed.longValue()) {
						final IDecoratableResource decoratableResource = (IDecoratableResource) resource
								.getSessionProperty(DECORATABLE_RESOURCE_KEY);
						if (decoratableResource != null) {
							final DecorationHelper helper = new DecorationHelper(
									activator.getPreferenceStore());
							helper.decorate(decoration, decoratableResource);
							return;
						}
					}
				}
			}
		} catch (CoreException e) {
			handleException(resource, e);
			return;
		}

		if (Team.isIgnoredHint(resource))
			return;

		final RepositoryMapping mapping = RepositoryMapping
				.getMapping(resource);
		if (mapping == null)
			return;

		if (mapping.getRepoRelativePath(resource) == null)
			return;

		GitDecoratorJob.getJobForRepository(
				mapping.getGitDirAbsolutePath().toString())
				.addDecorationRequest(element);
	}

