	private void start(IJobChangeListener jobChangeListener) {
		if (checkForLaunches
				&& LaunchFinder.shouldCancelBecauseOfRunningLaunches(
						Arrays.asList(repositories), null)) {
			return;
		}
		String jobName;
		if (this.repositories.length == 1) {
			String repoName = Activator.getDefault().getRepositoryUtil()
					.getRepositoryName(repositories[0]);
			String shortBranchName;
			try {
				shortBranchName = repositories[0].getBranch();
			} catch (IOException e) {
				shortBranchName = ""; 			}
			jobName = NLS.bind(UIText.PullOperationUI_PullingTaskName,
					shortBranchName, repoName);
		} else
			jobName = UIText.PullOperationUI_PullingMultipleTaskName;
		Job job = new WorkspaceJob(jobName) {

			@Override
			public IStatus runInWorkspace(IProgressMonitor monitor) {
				execute(monitor, false);
				return Status.OK_STATUS;
			}

			@Override
			public boolean belongsTo(Object family) {
				if (JobFamilies.PULL.equals(family))
					return true;
				return super.belongsTo(family);
			}
		};
		job.setRule(RuleUtil.getRuleForRepositories(Arrays.asList(repositories)));
		job.setUser(true);
		job.addJobChangeListener(jobChangeListener);
		job.schedule();
	}

