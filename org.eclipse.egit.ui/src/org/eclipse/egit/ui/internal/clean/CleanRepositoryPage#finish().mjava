	public void finish() {
		try {
			final Set<String> itemsToClean = getItemsToClean();

			getContainer().run(true, false, new IRunnableWithProgress() {
				@Override
				public void run(IProgressMonitor monitor) throws InvocationTargetException,
						InterruptedException {
					SubMonitor subMonitor = SubMonitor.convert(monitor,
							UIText.CleanRepositoryPage_cleaningItems, 1);

					Git git = Git.wrap(repository);
					CleanCommand command = git.clean().setDryRun(false);
					command.setCleanDirectories(cleanDirectories);
					command.setIgnore(!includeIgnored);
					command.setPaths(itemsToClean);
					try {
						command.call();
					} catch (GitAPIException ex) {
						Activator.logError("cannot call clean command!", ex); 					}

					try {
						IProject[] projects = ProjectUtil.getProjectsContaining(repository, itemsToClean);
						ResourcesPlugin.getWorkspace().run(
								pm -> ProjectUtil.refreshResources(projects,
										pm),
								null, IWorkspace.AVOID_UPDATE,
								subMonitor.newChild(1));
					} catch (CoreException e) {
					}

					refreshRepositoriesView();
				}
			});
		} catch (Exception e) {
			Activator.logError("Unexpected exception while cleaning", e); 		}
	}

