		public synchronized boolean cancel(CancelMode cancellation) {
			CancelMode mode = cancellation == null ? CancelMode.CANCEL
					: cancellation;
			switch (state) {
			case PRISTINE:
				finish(false);
				return true;
			case SCHEDULED:
				state = State.CANCELING;
				boolean canceled = job.cancel();
				if (canceled) {
					state = State.CANCELED;
				} else if (mode == CancelMode.INTERRUPT) {
					interrupt();
				} else if (mode == CancelMode.ABANDON) {
					notifyAll();
				}
				return canceled;
			case CANCELING:
				if (mode == CancelMode.INTERRUPT) {
					interrupt();
				} else if (mode == CancelMode.ABANDON) {
					notifyAll();
				}
				return false;
			case INTERRUPT:
				if (mode != CancelMode.CANCEL) {
					notifyAll();
				}
				return false;
			case CANCELED:
				return true;
			default:
				return false;
			}
		}

