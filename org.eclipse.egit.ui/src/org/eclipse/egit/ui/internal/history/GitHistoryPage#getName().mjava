	public String getName() {
		final String repositoryName = Activator.getDefault()
				.getRepositoryUtil().getRepositoryName(db);
		final ResourceList in = (ResourceList) super.getInput();
		if (currentWalk == null || in == null || in.getItems().length == 0)
			return ""; 
		if (in.getItems().length == 1) {
			IResource resource = in.getItems()[0];
			final String type;
			switch (resource.getType()) {
			case IResource.FILE:
				type = UIText.GitHistoryPage_FileType;
				break;
			case IResource.PROJECT:
				type = UIText.GitHistoryPage_ProjectType;
				break;
			default:
				type = UIText.GitHistoryPage_FolderType;
				break;
			}
			String path = resource.getFullPath().makeRelative().toString();
			if (resource.getType() == IResource.FOLDER)
				path = path + '/';
			return NLS.bind(NAME_PATTERN, new Object[] { type, path,
					repositoryName });
		} else {
			StringBuilder b = new StringBuilder();
			for (IResource res : in.getItems()) {
				b.append(res.getFullPath());
				if (res.getType() == IResource.FOLDER)
					b.append('/');
				if (b.length() > 100) {
					b.append("...  "); 					break;
				}
				b.append(", "); 			}
			if (b.length() > 2)
				b.setLength(b.length() - 2);
			String multiResourcePrefix = NLS.bind(
					UIText.GitHistoryPage_MultiResourcesType, Integer
							.valueOf(in.getItems().length));
			return NLS.bind(NAME_PATTERN, new Object[] { multiResourcePrefix,
					b.toString(), repositoryName });
		}
	}

