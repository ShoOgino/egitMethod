	void initAndStartRevWalk(boolean forceNewWalk) throws IllegalStateException {
		try {
			if (trace)
				GitTraceLocation.getTrace().traceEntry(
						GitTraceLocation.HISTORYVIEW.getLocation());

			if (input == null)
				return;
			Repository db = input.getRepository();
			if (repoHasBeenRemoved(db)) {
				clearHistoryPage();
				return;
			}

			AnyObjectId headId = resolveHead(db, true);
			if (headId == null) {
				currentHeadId = null;
				currentFetchHeadId = null;
				currentRepo = db;
				clearViewers();
				return;
			}
			AnyObjectId fetchHeadId = resolveFetchHead(db);

			List<FilterPath> paths = buildFilterPaths(input.getItems(), input
					.getFileList(), db);

			boolean repoChanged = false;
			if (!db.equals(currentRepo)) {
				repoChanged = true;
				currentRepo = db;
			}

			if (forceNewWalk || repoChanged
					|| shouldRedraw(headId, fetchHeadId, paths)) {
				releaseGenerateHistoryJob();

				if (repoChanged) {
					clearViewers();
				}

				SWTWalk walk = createNewWalk(db, headId, fetchHeadId);

				fileDiffWalker = createFileWalker(walk, db, paths);

				loadInitialHistory(walk);
			} else {
				graph.setHistoryPageInput(input);
			}
		} finally {
			if (trace)
				GitTraceLocation.getTrace().traceExit(
						GitTraceLocation.HISTORYVIEW.getLocation());

		}
	}

