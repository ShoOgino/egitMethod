	protected List<RevCommit> getSelectedCommits(ExecutionEvent event)
			throws ExecutionException {
		Repository repository = getRepository(event);
		if (repository == null)
			return Collections.emptyList();
		IStructuredSelection selection = getSelection(event);
		if (selection.isEmpty())
			return Collections.emptyList();
		List<RevCommit> commits = new ArrayList<>();
		try (RevWalk walk = new RevWalk(repository)) {
			for (Object element : selection.toList()) {
				RevCommit commit = AdapterUtils.adapt(element, RevCommit.class);
				if (commit != null) {
					RevCommit reparsed = walk.parseCommit(commit.getId());
					commits.add(reparsed);
				}
			}
		} catch (IOException e) {
			throw new ExecutionException(e.getMessage(), e);
		}
		return commits;
	}

