	public RepositorySelectionPage(final boolean sourceSelection,
			final List<RemoteConfig> configuredRemotes, String presetUri) {

		super(RepositorySelectionPage.class.getName());

		this.uri = new URIish();
		this.sourceSelection = sourceSelection;

		String preset = presetUri;
		if (presetUri == null) {
			Clipboard clipboard = new Clipboard(Display.getCurrent());
			String text = (String) clipboard
					.getContents(TextTransfer.getInstance());
			try {
				if (text != null) {
					text = stripGitCloneCommand(text);
					text = text.split(
							"[ \\f\\n\\r\\x0B\\t\\xA0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000]", 							2)[0];
					URIish u = new URIish(text);
					if (canHandleProtocol(u)) {
						if (Protocol.GIT.handles(u) || Protocol.SSH.handles(u)
								|| (Protocol.HTTP.handles(u)
										|| Protocol.HTTPS.handles(u))
										&& KnownHosts.isKnownHost(u.getHost())
								|| text.endsWith(Constants.DOT_GIT_EXT)) {
							preset = text;
						}
					}
				}
			} catch (URISyntaxException e) {
			}
			clipboard.dispose();
		}
		this.presetUri = preset;

		this.configuredRemotes = getUsableConfigs(configuredRemotes);

		selection = RepositorySelection.INVALID_SELECTION;

		if (sourceSelection) {
			setTitle(UIText.RepositorySelectionPage_sourceSelectionTitle);
			setDescription(UIText.RepositorySelectionPage_sourceSelectionDescription);
		} else {
			setTitle(UIText.RepositorySelectionPage_destinationSelectionTitle);
			setDescription(UIText.RepositorySelectionPage_destinationSelectionDescription);
		}

		storeInSecureStore = getPreferenceStore().getBoolean(
				UIPreferences.CLONE_WIZARD_STORE_SECURESTORE);
	}

