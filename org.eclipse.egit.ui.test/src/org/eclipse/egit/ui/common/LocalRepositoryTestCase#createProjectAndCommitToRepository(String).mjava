	protected File createProjectAndCommitToRepository(String repoName)
			throws Exception {

		Repository myRepository = createLocalTestRepository(repoName);
		File gitDir = myRepository.getDirectory();

		IProject firstProject = createStandardTestProjectInRepository(
				myRepository, PROJ1);

		try {
			new ConnectProviderOperation(firstProject, gitDir).execute(null);
		} catch (Exception e) {
			Activator.logError("Failed to connect project to repository", e);
		}
		assertConnected(firstProject);

		IProject secondProject = createStandardTestProjectInRepository(
				myRepository, PROJ2);


		try {
			new ConnectProviderOperation(secondProject, gitDir).execute(null);
		} catch (Exception e) {
			Activator.logError("Failed to connect project to repository", e);
		}
		assertConnected(secondProject);

		IFile dotProject = firstProject.getFile(".project");
		assertTrue(".project is not accessible: " + dotProject,
				dotProject.isAccessible());
		IFolder folder = firstProject.getFolder(FOLDER);
		IFile textFile = folder.getFile(FILE1);
		IFile textFile2 = folder.getFile(FILE2);
		folder = secondProject.getFolder(FOLDER);
		IFile secondtextFile = folder.getFile(FILE1);
		IFile secondtextFile2 = folder.getFile(FILE2);

		IFile[] commitables = new IFile[] { dotProject,
				textFile, textFile2, secondtextFile, secondtextFile2 };
		ArrayList<IFile> untracked = new ArrayList<IFile>();
		untracked.addAll(Arrays.asList(commitables));
		CommitOperation op = new CommitOperation(commitables,
				untracked, TestUtil.TESTAUTHOR, TestUtil.TESTCOMMITTER,
				"Initial commit");
		op.execute(null);

		createStableBranch(myRepository);
		touchAndSubmit(null);

		IndexDiffCache cache = Activator.getDefault().getIndexDiffCache();
		cache.getIndexDiffCacheEntry(lookupRepository(gitDir));

		return gitDir;
	}

