	@Override
	public IResource[] members(IResource res) throws TeamException {
		if (res.getType() == IResource.FILE || !gsds.shouldBeIncluded(res)) {
			return new IResource[0];
		}
		GitSynchronizeData gsd = gsds.getData(res.getProject());
		Repository repo = gsd.getRepository();
		GitSyncObjectCache repoCache = cache.get(repo);

		Collection<IResource> allMembers = new ArrayList<>();
		Map<String, IResource> existingMembers = new HashMap<>();

		String path = stripWorkDir(repo.getWorkTree(), res.getLocation().toFile());
		GitSyncObjectCache cachedMembers = repoCache.get(path);
		try {
			IContainer container = (IContainer) res;
			if (container.exists()) {
				for (IResource member : container.members()) {
					existingMembers.put(member.getName(), member);
				}
			}

			if (cachedMembers != null) {
				Collection<GitSyncObjectCache> members = cachedMembers
						.members();
				if (members != null) {
					for (GitSyncObjectCache gitMember : members) {
						String name = gitMember.getName();
						IResource existing = existingMembers.get(name);
						if (existing != null) {
							allMembers.add(existing);
						}
						if (existing == null || (existing
								.getType() != IResource.FILE) != gitMember
										.getDiffEntry().isTree()) {
							IPath localPath = new Path(name);
							if (gitMember.getDiffEntry().isTree()) {
								allMembers.add(container.getFolder(localPath));
							} else {
								allMembers.add(container.getFile(localPath));
							}
						}
					}
				}
			}
		} catch (CoreException e) {
			throw TeamException.asTeamException(e);
		}

		return allMembers.toArray(new IResource[0]);
	}

