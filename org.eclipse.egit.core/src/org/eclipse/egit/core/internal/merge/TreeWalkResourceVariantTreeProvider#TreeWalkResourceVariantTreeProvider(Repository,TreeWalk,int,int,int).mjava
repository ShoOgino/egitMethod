	public TreeWalkResourceVariantTreeProvider(Repository repository,
			TreeWalk treeWalk, int baseIndex, int ourIndex, int theirIndex)
			throws IOException {
		final AbstractTreeIterator[] initialTrees = new AbstractTreeIterator[treeWalk
				.getTreeCount()];
		for (int i = 0; i < treeWalk.getTreeCount(); i++) {
			initialTrees[i] = treeWalk.getTree(i, AbstractTreeIterator.class);
		}

		final GitResourceVariantCache baseCache = new GitResourceVariantCache();
		final GitResourceVariantCache theirsCache = new GitResourceVariantCache();
		final GitResourceVariantCache oursCache = new GitResourceVariantCache();

		while (treeWalk.next()) {
			final int modeBase = treeWalk.getRawMode(baseIndex);
			final int modeOurs = treeWalk.getRawMode(ourIndex);
			final int modeTheirs = treeWalk.getRawMode(theirIndex);
			if (modeBase == 0 && modeOurs == 0 && modeTheirs == 0) {
				continue;
			}

			final CanonicalTreeParser base = treeWalk.getTree(baseIndex,
					CanonicalTreeParser.class);
			final CanonicalTreeParser ours = treeWalk.getTree(ourIndex,
					CanonicalTreeParser.class);
			final CanonicalTreeParser theirs = treeWalk.getTree(theirIndex,
					CanonicalTreeParser.class);

			final IPath path = new Path(treeWalk.getPathString());
			final IResource resource = ResourceUtil
					.getResourceHandleForLocation(path);
			if (resource != null && resource.getProject().isAccessible()) {
				if (modeBase != 0) {
					baseCache.setVariant(resource,
							TreeParserResourceVariant.create(repository, base));
				}
				if (modeOurs != 0) {
					oursCache.setVariant(resource,
							TreeParserResourceVariant.create(repository, ours));
				}
				if (modeTheirs != 0) {
					theirsCache.setVariant(resource,
							TreeParserResourceVariant.create(repository, theirs));
				}
			}

			if (treeWalk.isSubtree()) {
				treeWalk.enterSubtree();
			}
		}

		treeWalk.reset();
		for (int i = 0; i < initialTrees.length; i++) {
			initialTrees[i].reset();
			treeWalk.addTree(initialTrees[i]);
		}

		baseTree = new GitCachedResourceVariantTree(baseCache);
		theirsTree = new GitCachedResourceVariantTree(theirsCache);
		oursTree = new GitCachedResourceVariantTree(oursCache);

		roots = new LinkedHashSet<IResource>();
		roots.addAll(baseCache.getRoots());
		roots.addAll(oursCache.getRoots());
		roots.addAll(theirsCache.getRoots());

		knownResources = new LinkedHashSet<IResource>();
		knownResources.addAll(baseCache.getKnownResources());
		knownResources.addAll(oursCache.getKnownResources());
		knownResources.addAll(theirsCache.getKnownResources());
	}

