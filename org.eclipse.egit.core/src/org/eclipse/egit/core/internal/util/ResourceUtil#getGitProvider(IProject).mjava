	@Nullable
	final public static GitProvider getGitProvider(@NonNull IProject project) {
		if (!project.isAccessible()) {
			return null;
		}
		try {
			GitProvider provider = lookupProviderProp(project);
			if (provider != null) {
				return provider;
			}
			if (MappingJob.isKnownGitProject(project)
					|| isMarkedAsNotSharedWithGit(project)) {
				return null;
			}
			String existingID = project
					.getPersistentProperty(PROVIDER_PROP_KEY);
			if (existingID == null) {
				markAsUnshared(project);
			} else {
				markAsShared(project, existingID);
				boolean isGitProvider = GitProvider.ID.equals(existingID);
				if (isGitProvider) {
					MappingJob.initProviderAsynchronously(project);
				}
			}
			return null;
		} catch (CoreException e) {
			Activator.getDefault().getLog().log(e.getStatus());
		}
		return null;
	}

